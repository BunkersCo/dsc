#!/usr/bin/perl -w

use vars qw(%PLOTS $PLOT %ARGS $CFG);

use OARC::ploticus;
use OARC::extractor;
require '/usr/local/dsc/libexec/plots-cfg.pl';

use POSIX;
use List::Util qw(max);
use Chart::Ploticus;
use CGI;
use CGI::Untaint;
use DBI;
use Data::Dumper;
use Digest::MD5;
use Text::Template;
use MIME::Base64;
use Hash::Merge;

# globals
$main::now = time;
$main::ploticus_debug = undef;

# constants
my $DATAROOT = '/usr/local/dsc/data';
my $CacheImageTTL = 600; # 10 min
my @valid_tlds = qw(
ac ad ae af ag ai al am an ao aq ar as at au aw az ba bb bd be bf
bg bh bi bj bm bn bo br bs bt bv bw by bz ca cc cd cf cg ch ci ck
cl cm cn co cr cu cv cx cy cz de dj dk dm do dz ec ee eg eh er es
et fi fj fk fm fo fr ga gd ge gf gg gh gi gl gm gn gp gq gr gs gt
gu gw gy hk hm hn hr ht hu id ie il im in io iq ir is it je jm jo
jp ke kg kh ki km kn kp kr kw ky kz la lb lc li lk lr ls lt lu lv
ly ma mc md mg mh mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz
na nc ne nf ng ni nl no np nr nu nz om pa pe pf pg ph pk pl pm pn
pr ps pt pw py qa re ro ru rw sa sb sc sd se sg sh si sj sk sl sm
sn so sr st sv sy sz tc td tf tg th tj tk tm tn to tp tr tt tv tw
tz ua ug uk um us uy uz va vc ve vg vi vn vu wf ws ye yt yu za zm
zw aero biz com coop info museum name net org pro gov edu mil int
arpa .
);

$main::use_data_uri = 1;


my $cgi = CGI->new();
my $untaint = CGI::Untaint->new($cgi->Vars);
my %ARGS;
$ARGS{server} = $untaint->extract(-as_printable => 'server')	|| 'none';
$ARGS{node} = $untaint->extract(-as_printable => 'node')	|| 'all';
$ARGS{window} = $untaint->extract(-as_integer => 'window')	|| 3600*4;
$ARGS{binsize} = $untaint->extract(-as_integer => 'binsize')	|| TEMPLATE::default_binsize($ARGS{window});
$ARGS{plot} = $untaint->extract(-as_printable => 'plot')	|| 'bynode';
$ARGS{content} = $untaint->extract(-as_printable => 'content')	|| 'html';
$ARGS{mini} = $untaint->extract(-as_integer => 'mini')		|| 0;
$ARGS{end} = $untaint->extract(-as_integer => 'end')		|| $main::now;
$ARGS{yaxis} = $untaint->extract(-as_printable => 'yaxis');

$PLOT = Plot($ARGS{plot});
error("Unknown plot type: $ARGS{plot}") unless (defined ($PLOT));
#print STDERR "[$$] PLOT=" . Dumper($PLOT);

if (!defined($ARGS{yaxis})) {
	$ARGS{yaxis} = find_default_yaxis_type();
}

$ARGS{end} = $main::now if ($ARGS{end} > $main::now);
#print STDERR "[$$] " . Dumper(\%ARGS);
my $cache_name = cache_name($ARGS{server},
	$ARGS{node},
	$ARGS{plot},
	$ARGS{end} == $main::now ? 0 : $ARGS{end},
	$ARGS{window},
	$ARGS{binsize},
	$ARGS{mini},
	$ARGS{yaxis});

my $ACCUM_TOP_N = $ARGS{mini} ? 20 : 40;
my $CFG = read_config('/usr/local/dsc/etc/dsc-grapher.cfg');
#print STDERR Dumper($CFG);


if ('html' eq $ARGS{content}) {
	if ($main::use_data_uri) {
		if (!reason_to_not_plot()) {
			print STDERR "no reason to not plot\n";
			if (!check_image_cache($cache_name)) {
				print STDERR "need to make cached image\n";
				make_image($cache_name);
			}
		}
	}
	my $source = "/usr/local/dsc/share/html/plot.page";
	my $t = Text::Template->new(
		TYPE => 'FILE',
		SOURCE => $source,
		DELIMITERS => ['[', ']']
	);
	error("Text::Template failed for plot.page") unless defined ($t);
	print $cgi->header(-type=>'text/html',-expires=>'+15m');
	print $t->fill_in(PACKAGE => TEMPLATE);
	exit 0;
} else {
	make_image($cache_name) unless (!reason_to_not_plot() && check_image_cache($cache_name));
	if (-f cache_image_path($cache_name)) {
		print $cgi->header(-type=>'image/png',-expires=>'+15m');
		cat_image($cache_name);
	}
	exit 0;
}

sub reason_to_not_plot {
	return 'Please select a server' if ($ARGS{server} eq 'none');
	return 'Please select a plot' if ($ARGS{plot} eq 'none');
	my $PLOT = main::Plot($ARGS{plot});
	return 'Please select a Query Attributes sub-item' if ($PLOT->{plot_type} eq 'none');
	undef;
}

sub make_image {
	my $cache_name = shift;
	my $start;	# script starting time
	my $stop;	# script ending time
	my $data;	# hashref holding the data to plot
	my $datafile;	# temp filename storing plot data
	my $cache_image_path = cache_image_path($cache_name);

	return unless defined($PLOT);
	return if ($PLOT->{plot_type} eq 'none');
	print STDERR "[$$] Plotting $ARGS{server} $ARGS{node} $ARGS{plot} $ARGS{end} $ARGS{window} $ARGS{binsize}\n";
	$start = time;
	$data = load_data();
	print STDERR Dumper($data) if ($PLOT->{debugflag});
	if (defined($PLOT->{munge_func})) {
		print STDERR "[$$] munging\n";
		$data = &{$PLOT->{munge_func}}($data);
	}
	if ($ARGS{yaxis} eq 'percent') {
		print STDERR "[$$] converting to percentage\n";
		$data = convert_to_percentage($data);
	}
	print STDERR Dumper($data) if ($PLOT->{debugflag});
	$datafile = plotdata_tmp($ARGS{plot});
	if ($PLOT->{plot_type} eq 'trace') {
		trace_data_to_tmpfile($data, $datafile);
		trace_plot($datafile, $ARGS{binsize}, $cache_image_path);
	} elsif ($PLOT->{plot_type} eq 'accum1d') {
		accum1d_data_to_tmpfile($data, $datafile);
		accum1d_plot($datafile, $ARGS{binsize}, $cache_image_path);
	} elsif ($PLOT->{plot_type} eq 'accum2d') {
		accum2d_data_to_tmpfile($data, $datafile);
		accum2d_plot($datafile, $ARGS{binsize}, $cache_image_path);
	} else {
		error("Unknown plot type: $PLOT->{plot_type}");
	}
	$stop = time;
	printf STDERR "[$$] graph took %d seconds\n", $stop-$start;
}

sub datafile_path {
	my $plot = shift;
	my $node = shift;
	my $when = shift;
	my $dataset = $PLOT->{dataset} || $plot;
	my $datafile = $PLOT->{datafile} || $plot;
	join('/',
		$DATAROOT,
		$ARGS{server},
		$node,
		yymmdd($when),
		$dataset,
		"$datafile.dat");
}

sub load_data {
	my $datadir;
	my $yymmdd;
	my %hash;
	my $start = time;
	my $last = $ARGS{end};
	my $first = $ARGS{end} - $ARGS{window};
	my $nl = 1;
	if ($PLOT->{plot_type} =~ /^accum/) {
		#
		# for 'accum' plots, round up the start time
		# to the beginning of the next 24hour period
		#
		$first += (86400 - ($ARGS{end} % 86400));
	}
	foreach my $node (@{$CFG->{servers}{$ARGS{server}}}) {
	    next if ($ARGS{node} ne 'all' && $node ne $ARGS{node});
	    for (my $t = $first; $t <= $last; $t += 86400) {
		my %thash;
		my $datafile = datafile_path($ARGS{plot}, $node, $t);
		print STDERR "[$$] reading $datafile\n";
		warn "[$$] $!\n" unless (-f $datafile);
		if ('bynode' eq $ARGS{plot}) {
			# XXX ugly special case
			$nl = &{$PLOT->{data_reader}}(\%thash, $datafile);
			bynode_summer(\%thash, \%hash, $node);
			# XXX yes, wasteful repetition
			$PLOT->{keys} = [ @{$CFG->{servers}{$ARGS{server}}} ];
			$PLOT->{names} = [ @{$CFG->{servers}{$ARGS{server}}} ];
		} elsif ('all' ne $ARGS{node}) {
			$nl = &{$PLOT->{data_reader}}(\%hash, $datafile);
		} else {
			$nl = &{$PLOT->{data_reader}}(\%thash, $datafile);
			&{$PLOT->{data_summer}}(\%thash, \%hash);
		}
	    }
	}
	my $stop = time;
	printf STDERR "[$$] reading datafile took %d seconds, %d lines\n",
		$stop-$start,
		$nl;
	\%hash;
}

sub trace_data_to_tmpfile {
	my $data = shift;
	my $tf = shift;
	my $start = time;
	my $nl = Ploticus_create_datafile($data,
		$PLOT->{keys},
		$tf,
		$ARGS{binsize},
		$ARGS{end},
		$ARGS{window},
		$PLOT->{yaxes}{$ARGS{yaxis}}{divideflag});
	my $stop = time;
	printf STDERR "[$$] writing tmpfile took %d seconds, %d lines\n",
		$stop-$start,
		$nl;
}

sub accum1d_data_to_tmpfile {
	my $data = shift;
	my $tf = shift;
	my $start = time;
	my $accum_win = time % 86400;	# time since midnight;
	my $n;
	delete $data->{$SKIPPED_KEY};
        delete $data->{$SKIPPED_SUM_KEY};
	$n = 0;
	foreach my $k1 (sort {$data->{$b} <=> $data->{$a}} keys %$data) {
		print $tf join(' ',
			$k1,
			$data->{$k1} / $accum_win,
			&{$PLOT->{label_func}}($k1),
			&{$PLOT->{color_func}}($k1),
			), "\n";
		last if (++$n == $ACCUM_TOP_N);
	}
	close($tf);
	my $stop = time;
	printf STDERR "[$$] writing tmpfile took %d seconds, %d lines\n",
		$stop-$start,
		$n;
}

sub accum2d_data_to_tmpfile {
	my $data = shift;
	my $tf = shift;
	my $start = time;
	my %accum_sum;
	my $accum_win = time % 86400;	# time since midnight;
	my $n;
	delete $data->{$SKIPPED_KEY};
        delete $data->{$SKIPPED_SUM_KEY};
	foreach my $k1 (keys %$data) {
		foreach my $k2 (keys %{$data->{$k1}}) {
			$accum_sum{$k1} += $data->{$k1}{$k2};
		}
	}
	$n = 0;
	foreach my $k1 (sort {$accum_sum{$b} <=> $accum_sum{$a}} keys %accum_sum) {
		my @vals;
		foreach my $k2 (@{$PLOT->{keys}}) {
			my $val;
			if (defined($data->{$k1}{$k2})) {
				$val = sprintf "%f", $data->{$k1}{$k2} / $accum_win;
			} else {
				$val = 0;
			}
			push (@vals, $val);
		}
		push(@vals, $accum_sum{$k1});
		print $tf join(' ', $k1, @vals), "\n";
		last if (++$n == $ACCUM_TOP_N);
	}
	close($tf);
	my $stop = time;
	printf STDERR "[$$] writing tmpfile took %d seconds\n", $stop-$start;
}

sub time_descr
{
	my $from_t = $ARGS{end} - $ARGS{window};
	my $to_t = $ARGS{end};
	if ($PLOT->{plot_type} =~ /^accum/) {
		$from_t += (86400 - ($ARGS{end} % 86400));
		$to_t += (86400 - ($ARGS{end} % 86400) - 1);
		$to_t = $main::now if ($to_t > $main::now);
	}
	my $from_ctime = strftime("%b %d, %Y, %T", gmtime($from_t));
	my $to_ctime = strftime("%b %d, %Y, %T UTC", gmtime($to_t));
	"From $from_ctime To $to_ctime";
}

sub find_default_yaxis_type {
	foreach my $t (keys %{$PLOT->{yaxes}}) {
		return $t if ($PLOT->{yaxes}{$t}{default});
	}
	#die "[$$] no default yaxis type for $ARGS{plot}\n";
	'none';
}

sub trace_plot {
	my $tf = shift;
	my $binsize = shift;
	my $pngfile = shift;
	my $plotnames = $PLOT->{plotnames} || $PLOT->{names};
	my $ntypes = @$plotnames;
	my $start = time;

	ploticus_init("png", "$pngfile.new");
	ploticus_arg("-maxrows", "20000");
	ploticus_begin();
	Ploticus_getdata($tf->filename());
	#system "cat $tf 1>&2";

	my $areadef_opts = {
		-title => $PLOT->{plottitle} . "\n" . time_descr(),
		-rectangle => '1 1 6 4',
		-xscaletype => 'datetime mm/dd/yy',
		-ystackfields => join(',', 2..($ntypes+1)),
		-end => $ARGS{end},
		-window => $ARGS{window},
	};
	my $xaxis_opts = {
		-window => $ARGS{window},
	};
	my $yaxis_opts = {
		-label => $PLOT->{yaxes}{$ARGS{yaxis}}{label},
		-grid => 'yes',
	};
	my $bars_opts = {
		-labelsarrayref => $plotnames,
		-colorsarrayref => $PLOT->{colors},
		-indexesarrayref => [0..$ntypes-1],
		-barwidth => 4.5 / ($ARGS{window} / $binsize),
	};

	if ($ARGS{mini}) {
		$areadef_opts->{-title} = $PLOT->{plottitle};
		$areadef_opts->{-rectangle} = '1 1 4 2';
		delete $yaxis_opts->{-label};
		$xaxis_opts->{-mini} = 'yes';
	}

	Ploticus_areadef($areadef_opts);
	Ploticus_xaxis($xaxis_opts);
	Ploticus_yaxis($yaxis_opts);
	Ploticus_bars($bars_opts);
	Ploticus_legend() unless ($ARGS{mini});
	ploticus_end();

	rename("$pngfile.new", $pngfile);
	my $stop = time;
	printf STDERR "[$$] ploticus took %d seconds\n", $stop-$start;
}

sub accum1d_plot {
	my $tf = shift;
	my $binsize = shift;
	my $pngfile = shift;
	my $plotnames = $PLOT->{plotnames} || $PLOT->{names};
	my $ntypes = @$plotnames;
	my $start = time;

	ploticus_init("png", "$pngfile.new");
	ploticus_begin();
	Ploticus_getdata($tf->filename());
	Ploticus_categories(1);
	my $areadef_opts = {
		-title => $PLOT->{plottitle} . "\n" . time_descr(),
		-rectangle => '1 1 6 6',
		-yscaletype => 'categories',
		-xstackfields => '2',
	};
	my $xaxis_opts = {
		# yes we abuse/confuse x/y axes
		-label => $PLOT->{yaxes}{$ARGS{yaxis}}{label},
		-grid => 'yes',
	};
	my $yaxis_opts = {
		-stubs => 'usecategories',
	};
	my $bars_opts = {
                -colorfield => '4',
                -indexesarrayref => [0],
                -labelfield => 3,
                -horizontalbars => 'yes',
	};
	my $legend_opts = {
		-reverseorder => 'no',
	};

	if ($ARGS{mini}) {
		$areadef_opts->{-title} = $PLOT->{plottitle};
		$areadef_opts->{-rectangle} = '1 1 3 4';
		delete($xaxis_opts->{-label});
	}

	Ploticus_areadef($areadef_opts);
	Ploticus_xaxis($xaxis_opts);
	Ploticus_yaxis($yaxis_opts);
	unless ($ARGS{mini}) {
		for($i=0;$i<$ntypes;$i++) {
			Ploticus_legendentry({
				-label => $PLOT->{names}->[$i],
				-details => $PLOT->{colors}->[$i],
				-tag => $PLOT->{keys}->[$i],
			});
		}
	}
	Ploticus_bars($bars_opts);
	Ploticus_legend() unless ($ARGS{mini});
	ploticus_end();

	rename("$pngfile.new", $pngfile);
	my $stop = time;
	printf STDERR "[$$] ploticus took %d seconds\n", $stop-$start;
}

sub accum2d_plot {
	my $tf = shift;
	my $binsize = shift;
	my $pngfile = shift;
	my $plotnames = $PLOT->{plotnames} || $PLOT->{names};
	my $ntypes = @$plotnames;
	my $start = time;

	ploticus_init("png", "$pngfile.new");
	ploticus_begin();
	Ploticus_getdata($tf->filename());
	Ploticus_categories(1);
	my $areadef_opts = {
		-title => $PLOT->{plottitle} . "\n" . time_descr(),
		-rectangle => '1 1 6 6',
		-yscaletype => 'categories',
		-xstackfields => join(',', 2..($ntypes+1)),
	};
	my $xaxis_opts = {
		# yes we abuse/confuse x/y axes
		-label => $PLOT->{yaxes}{$ARGS{yaxis}}{label},
		-grid => 'yes',
	};
	my $yaxis_opts = {
		-stubs => 'usecategories',
	};
	my $bars_opts = {
		-labelsarrayref => $plotnames,
		-colorsarrayref => $PLOT->{colors},
		-keysarrayref => $PLOT->{keys},
		-indexesarrayref => [0..$ntypes-1],
		-horizontalbars => 'yes',
	};
	my $legend_opts = {
		-reverseorder => 'no',
	};

	if ($ARGS{mini}) {
		$areadef_opts->{-title} = $PLOT->{plottitle};
		$areadef_opts->{-rectangle} = '1 1 3 4';
		delete($xaxis_opts->{-label});
	}

	Ploticus_areadef($areadef_opts);
	Ploticus_xaxis($xaxis_opts);
	Ploticus_yaxis($yaxis_opts);
	Ploticus_bars($bars_opts);
	Ploticus_legend() unless ($ARGS{mini});
	ploticus_end();

	rename("$pngfile.new", $pngfile);
	my $stop = time;
	printf STDERR "[$$] ploticus took %d seconds\n", $stop-$start;
}

sub error {
	my $msg = shift;
	print $cgi->header(-type=>'text/html',-expires=>'+15m');
	print "<h2>$0 ERROR</h2><p>$msg\n";
	die "$msg\n";
}

sub dumpdata {
	my $ref = shift;
	print $cgi->header(-type=>'text/plain',-expires=>'+15m');
	print Dumper($ref);
	exit 0;
}



sub munge_2d_to_1d {
	# this function changes a 2D array into a 1D array
	# by combining key values.   For example $dat{k1}{k2} becomes $dat{"k1:k2"}
	my $data = shift;
	my $d1keys = shift;
	my $d2keys = shift;
	my %newdata;
	my $j1;
	my $j2;
	my $N = 0;
	foreach my $t (keys %$data) {
		foreach my $k1 (keys %{$data->{$t}}) {
			$j1 = $k1;
			#$j1 = 'else' unless grep {$_ eq $j1} @$d1keys;
			next unless grep {$_ eq $j1} @$d1keys;
			foreach my $k2 (keys %{$data->{$t}{$k1}}) {
				$j2 = $k2;
				#$j2 = 'else' unless grep {$_ eq $j2} @$d2keys;
				next unless grep {$_ eq $j2} @$d2keys;
				$newdata{$t}{"$j1:$j2"} += $data->{$t}{$k1}{$k2};
			}
		}
	}
	\%newdata;
}

sub convert_to_percentage {
	my $data = shift;
	my %newdata;
	foreach my $t (keys %$data) {
		$S = 0;
		foreach my $k1 (keys %{$data->{$t}}) {
			$S += $data->{$t}{$k1};
		}
		foreach my $k1 (keys %{$data->{$t}}) {
			$newdata{$t}{$k1} = 100 * $data->{$t}{$k1} / $S;
		}
	}
	\%newdata;
}

sub cache_name {
	my $ctx = Digest::MD5->new;
	$ctx->add(@_);
	$ctx->hexdigest;
}

sub cache_image_path {
	my $prefix = shift;
	"/usr/local/dsc/cache/$prefix.png";
}

# return 0 if we should generate a cached image
# return 1 if the cached image is useable
sub check_image_cache {
	my $prefix = shift;
	my @sb = stat(cache_image_path($prefix));
	return 0 unless (defined(@sb));
	return 0 unless (time - $sb[9] < $CacheImageTTL);
	return 1;
}

sub cat_image {
	my $prefix = shift;
	if (open(F, cache_image_path($prefix))) {
		print while (<F>);
		close(F);
	} else {
		#die "$prefix: $!\n";
	}
}

sub image_to_buf {
	my $prefix = shift;
	my $buf = '';
	if (open(F, cache_image_path($prefix))) {
		$buf .= $_ while (<F>);
		close(F);
	} else {
		#die "$prefix: $!\n";
	}
	$buf;
}

sub valid_tld_filter {
        my $tld = shift;
        grep {$tld eq $_} @valid_tlds;
}

sub numeric_tld_filter {
        my $tld = shift;
        return ($tld =~ /^[0-9]+$/) ? 1 : 0;
}

sub invalid_tld_filter {
        my $tld = shift;
        return 0 if (valid_tld_filter($tld));
        return 0 if (numeric_tld_filter($tld));
        return 1;
}

sub read_config {
	my $f = shift;
	my %C;
	open(F, $f) || die "$f: $!\n";
	while (<F>) {
		my @x = split;
		next unless @x;
		my $directive = shift @x;
		if ($directive eq 'server') {
			my $servername = shift @x;
			$C{servers}{$servername} = \@x;
		}
		if ($directive =~ /windows$/) {
			$C{$directive} = \@x;
		}
	}
	close(F);
	\%C;
}

sub data_summer_0d {
	my $from = shift;
	my $to = shift;
	my $start = time;
	foreach my $k0 (keys %$from) {
		$to->{$k0} += $from->{$k0};
	}
	my $stop = time;
	printf STDERR "[$$] data_summer_0d took %d seconds\n", $stop-$start;
}

sub data_summer_1d {
	my $from = shift;
	my $to = shift;
	my $start = time;
	foreach my $k0 (keys %$from) {
		foreach my $k1 (keys %{$from->{$k0}}) {
			$to->{$k0}{$k1} += $from->{$k0}{$k1};
		}
	}
	my $stop = time;
	printf STDERR "[$$] data_summer_1d took %d seconds\n", $stop-$start;
}

sub data_summer_2d {
	my $from = shift;
	my $to = shift;
	my $start = time;
	foreach my $k0 (keys %$from) {
		foreach my $k1 (keys %{$from->{$k0}}) {
			foreach my $k2 (keys %{$from->{$k0}{$k1}}) {
				$to->{$k0}{$k1}{$k2} += $from->{$k0}{$k1}{$k2};
			}
		}
	}
	my $stop = time;
	printf STDERR "[$$] data_summer_2d took %d seconds\n", $stop-$start;
}

# XXX special hack for "bynode" plots
# XXX assume $from hash is 1D
# NOTE this is very similar to data_summer_1d
#
sub bynode_summer {
	my $from = shift;
	my $to = shift;
	my $newkey = shift;
	my $start = time;
	foreach my $k0 (keys %$from) {
		foreach my $k1 (keys %{$from->{$k0}}) {
			$to->{$k0}{$newkey} += $from->{$k0}{$k1};
		}
	}
	my $stop = time;
	printf STDERR "[$$] bynode_summer took %d seconds\n", $stop-$start;
}

sub Plot {
	my $plotname = shift;
	$PLOTS{$plotname};
}

package TEMPLATE;
#use vars qw(%PLOTS $PLOT %ARGS $CFG);

sub img_with_map {
	my $imgsrc;
	if (my $reason = main::reason_to_not_plot()) {
		return "<p>$reason";
	}
	
	if ($main::use_data_uri) {
		$imgsrc = "data:image/png;base64,\n";
		$imgsrc .= main::encode_base64(main::image_to_buf($cache_name));
	} else {
		my %own_args = %ARGS;	# copy
		while ($k = shift) { $own_args{$k} = shift; }
		$own_args{content} = 'image';
		$imgsrc = urlpath(%own_args);
	}
	'<img src="' . $imgsrc . '">';
}

sub img {
	my %own_args = %ARGS;	# copy
	while ($k = shift) { $own_args{$k} = shift; }
	$own_args{content} = 'image';
	my $p = urlpath(%own_args);
	my $q = "<img src=\"$p\">";
	#print STDERR "[$$] img() ret '$q'\n";
	$q;
}

sub page {
	my %own_args = %ARGS;	# copy
	while ($k = shift) { $own_args{$k} = shift; }
	my $p = urlpath(%own_args);
	#print STDERR "[$$] page() ret '$p'\n";
	$p;
}

sub urlpath {
	my %args = @_;
	my $cgi = $ENV{REQUEST_URI};
	if ((my $n = index($cgi,'?')) > 0) {
		$cgi = substr($cgi,0,$n);
	}
	delete_default_args(\%args);
	"$cgi?" . join('&', map {"$_=$args{$_}"} keys %args);
}

sub merge_args {
	my %new = @_;
	my %old = %ARGS;
	foreach my $k (keys %new) {
		$old{$k} = $new{$k};
	}
	%old;
}

sub default_binsize {
	my $win = shift;
	my $bin = $win / 240;
	$bin = 60 if ($bin < 60);
	int($bin);
}

sub delete_default_args {
	my $href = shift;
	delete $href->{server} if ('none' eq $href->{server});
	delete $href->{node} if ('all' eq $href->{node});
	delete $href->{binsize} if (default_binsize($ARGS{window}) == $href->{binsize});
	delete $href->{end} if ((abs($main::now - $href->{end}) / $href->{window}) < 0.20);
	delete $href->{window} if (3600*4 == $href->{window});
	delete $href->{plot} if ('none' eq $href->{plot});
	delete $href->{content} if ('html' eq $href->{content});
	delete $href->{mini} if (0 == $href->{mini});
	delete $href->{yaxis} if (main::find_default_yaxis_type() eq $href->{yaxis});
}

sub server { $ARGS{server}; }
sub node { $ARGS{node}; }

sub a_markup {
	my $h = shift;
	my $a = shift;
	my $c = shift;
	die "no h" unless (defined($h));
	die "no a" unless (defined($a));
	"<a" . (defined($c) ? " class=\"$c\"" : '') . " href=\"$h\">$a</a>";
}

sub img_markup {
	my $s = shift;
	my $c = shift;
	"<img" . (defined($c) ? " class=\"$c\"" : '') . " src=\"$s\">";
}

sub navbar_item {
	my $arg = shift;
	my $val = shift;
	my $label = shift;
	my $class = ($val eq $ARGS{$arg}) ? 'current' : undef;
	my %newargs;
	$newargs{$arg} = $val;
	$newargs{node} = 'all' if ($arg eq 'server');
	a_markup(urlpath(merge_args(%newargs)), $label, $class) . "\n";
}

sub navbar_arrow_item {
	my $delta = shift;
	my $icon = shift;
	a_markup(urlpath(merge_args(end=>$ARGS{end} + $delta)), img_markup("/dsc-icons/$icon.png"));
}

sub sublist_item { '&rsaquo;&nbsp;'; }

sub navbar_servers_nodes {
	my $snippet = '';
	$snippet .= "<ul>\n";
	my @items;
	foreach my $server ( keys %{$CFG->{servers}} ) {
		#print STDERR "server=$server\n";
		$snippet .= "<li>" . navbar_item('server',$server,$server);
		if ($ARGS{server} eq $server) {
			foreach my $node (@{$CFG->{servers}{$server}}) {
				$snippet .= '<li>' . sublist_item();
				$snippet .= navbar_item('node',$node,$node);
			}
		}
	}
	$snippet .= "</ul>\n";
	$snippet;
}

sub navbar_plot {
	my @items = ();
	push(@items, navbar_item('plot','bynode','By Node')) if ($ARGS{node} eq 'all');
	push(@items, navbar_item('plot','qtype','Qtypes'));
	push(@items, navbar_item('plot','client_subnet2_accum','Classification'));
	if ($ARGS{plot} =~ /^client_subnet2/) {
		push(@items, sublist_item() . navbar_item('plot','client_subnet2_trace', 'trace'));
		push(@items, sublist_item() . navbar_item('plot','client_subnet2_count', 'count'));
	}
	push(@items, navbar_item('plot','client_subnet_accum','Client Geography'));
	push(@items, navbar_item('plot','qtype_vs_all_tld','TLDs'));
	if ($ARGS{plot} =~ /qtype_vs_.*_tld/) {
		push(@items, sublist_item() . navbar_item('plot','qtype_vs_valid_tld', 'valid'));
		push(@items, sublist_item() . navbar_item('plot','qtype_vs_invalid_tld', 'invalid'));
		push(@items, sublist_item() . navbar_item('plot','qtype_vs_numeric_tld', 'numeric'));
	}
	push(@items, navbar_item('plot','certain_qnames_vs_qtype','Popular Names'));
	push(@items, navbar_item('plot','X','Qname Length'));
	push(@items, navbar_item('plot','rcode','Rcodes'));
	push(@items, navbar_item('plot','X','Reply Lengths'));
	push(@items, navbar_item('plot','opcode','Opcodes'));
	push(@items, navbar_item('plot','query_attrs','Query Attributes'));
	if ($ARGS{plot} =~ /query_attrs|idn_qname|rd_bit|do_bit|edns_version/) {
		push(@items, sublist_item() . navbar_item('plot','idn_qname', 'IDN Qnames'));
		push(@items, sublist_item() . navbar_item('plot','rd_bit', 'RD bit'));
		push(@items, sublist_item() . navbar_item('plot','do_bit', 'DO bit'));
		push(@items, sublist_item() . navbar_item('plot','edns_version', 'EDNS version'));
	}
	push(@items, navbar_item('plot','direction_vs_ipproto','IP Protocols'));
	"<ul>\n" . join('<li>', '', @items) . "</ul>\n";
}

# This is function called from an "HTML" file by the template parser
#
sub navbar_window {
	my @items = ();
	my $PLOT = main::Plot($ARGS{plot});
	if (defined($PLOT->{plot_type}) && $PLOT->{plot_type} =~ /^accum/) {
		foreach my $w (@{$CFG->{accum_windows}}) {
			push(@items, navbar_item('window',window_secs($w),$w));
		}
		my @arrows;
		push(@arrows, navbar_arrow_item(-$ARGS{window}, '1leftarrow'));
		push(@arrows, navbar_arrow_item($ARGS{window}, '1rightarrow'));
		push(@items, join("", @arrows));
	} else {
		# trace
		foreach my $w (@{$CFG->{trace_windows}}) {
			push(@items, navbar_item('window',window_secs($w),$w));
		}
		my @arrows;
		push(@arrows, navbar_arrow_item(-$ARGS{window}, '2leftarrow'));
		push(@arrows, navbar_arrow_item(-$ARGS{window}/2, '1leftarrow'));
		push(@arrows, navbar_arrow_item($ARGS{window}/2, '1rightarrow'));
		push(@arrows, navbar_arrow_item($ARGS{window}, '2rightarrow'));
		push(@items, join("", @arrows));
	}
	join('<br>', @items);
}


# This is function called from an "HTML" file by the template parser
#
sub navbar_yaxis {
	my @items = ();
	my $PLOT = main::Plot($ARGS{plot});
	foreach my $t (keys %{$PLOT->{yaxes}}) {
		push(@items, navbar_item('yaxis',$t, $PLOT->{yaxes}{$t}{label}));
	}
	join('<br>', @items);
}

sub window_secs {
	my $win = shift;
	die unless ($win =~ /(\d+)(\w+)/);
	my $n = $1;
	my $unit = $2;
	if ($unit =~ /^hour/) {
		$n *= 3600;
	} elsif ($unit =~ /^day/) {
		$n *= 86400;
	} elsif ($unit =~ /^week/) {
		$n *= 7*86400;
	} else {
		die "unknown unit: $unit";
	}
	$n;
}
