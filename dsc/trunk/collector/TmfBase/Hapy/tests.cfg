test unnamed {

	grammar = {
		rGrammar = *rStatement >> end_r();
		rStatement = *rInstr >> ";";
		rInstr = rName | rToken;
		rName = string_r("description");
		rToken = alpha_r() >> *(alpha_r() | digit_r() | "_" | ".");

		rGrammar.trim(*space_r());
	}

	accept {}
	accept {;}
	accept {a;}
	accept {a a;}
	accept {a description a ; }
	
	reject {a=a;}
}

test needleInHaystack {
	grammar = {
		rGrammar = *anychar_r() >> alpha_r() >> "=" >> alpha_r() >> end_r();

		rGrammar.trim(*space_r());
	}

	accept {a=a}
	accept {ba=a}
	accept {bc=ca=a}
	accept {bc=a=a}
	accept {b!a=a}
	accept {b=!a=a}

	reject {a=a;}
}
